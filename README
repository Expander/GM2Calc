GM2Calc
=======

GM2Calc calculates the SUSY contributions to the anomalous magnetic
moment of the muon a_mu = (g-2)/2 in the real MSSM at the 1- and
leading 2-loop level.

Homepage:                https://gm2calc.hepforge.org
Source code repository:  https://github.com/gm2calc
References:              arxiv:XXXX.YYYY


Requirements
============

 * C++ compiler (g++ >= 4.6.3 or clang++ >= 3.4 or icpc >= 14.0.3)
 * Boost (version 1.37.0 or higher)   http://www.boost.org
 * Eigen 3 (version 3.1 or higher)    http://eigen.tuxfamily.org

Optional:

 * LAPACK                             http://www.netlib.org/lapack/


Compilation
===========

To compile GM2Calc run

  $ make

The used compiler and include paths can be passed as an argument to
make.  For example:

  $ make \
       CXX=icpc \
       EIGENFLAGS="-I/opt/eigen3/eigen3" \
       BOOSTFLAGS="-I/opt/boost/include"

The following default values are set in the makefile:

  CXX             := g++
  CPPFLAGS        := -Isrc
  CXXFLAGS        := -O2 -std=c++11
  CXX_DEP_GEN     := g++
  MAKELIB         := ar cru
  BOOSTFLAGS      := -I/usr/include
  EIGENFLAGS      := -I/usr/include/eigen3

The command line arguments passed to `make' are stored in the file
`make.args'.  To (re-)run `make' with the command line arguments
stored in `make.args' run

  $ cat make.args | xargs make


Compilation of the example programs
-----------------------------------

GM2Calc ships the two C++ example programs

  src/example-gm2calc.cpp
  src/example-slha.cpp

which illustrate how to use routines of GM2Calc at the C++ level.  The
examples can be compiled by running

  $ make examples


Using LAPACK (optional)
-----------------------

The routines which diagonalize the mass matrices by default use the
algorithms provided by Eigen.  However, the routines provided by
LAPACK can be used alternatively.  In order to make use of the LAPACK
routines one has to pass `ENABLE_LAPACK=1' to the make command.  In
addition, the LAPACK and BLAS libraries to be linked have to be passed
in the `LDFLAGS' variable to the make command:

  $ make ENABLE_LAPACK=1 LDLIBS="-llapack -lblas"


Running GM2Calc
===============

GM2Calc can be run with (i) either an SLHA interface or with (ii) a
custom GM2Calc interface (similar to SLHA, but different definition of
input parameters).  See `bin/gm2calc.x --help' for all options.

Example using the SLHA interface:

  $ bin/gm2calc.x --slha-input-file=input/example.slha

or

  $ cat input/example.slha | bin/gm2calc.x --slha-input-file=-

Example using the GM2Calc interface:

  $ bin/gm2calc.x --gm2calc-input-file=input/example.gm2

or

  $ cat input/example.gm2 | bin/gm2calc.x --gm2calc-input-file=-


SLHA interface
==============

When the input parameters are provided in SLHA-compliant form, GM2Calc
reads the input parameters from the following blocks:

 * SMINPUTS: Standard Model fermion masses, W and Z pole masses,
   alpha_s(MZ)

 * MASS: pole masses of SUSY particles, W pole mass.  If the W pole
   mass is given in MASS[24], then this value will be used instead of
   the W pole mass given in SMINPUTS[9].

 * HMIX: tan(beta), mu parameter, renormalization scale

 * AU, AD, AE: soft-breaking trilinear couplings, renormalization
   scale

 * MSOFT: soft-breaking gaugino masses, soft-breaking sfermion masses,
   renormalization scale

 * GM2CalcInput: alpha_em(MZ), alpha_em in the Thomson limit


GM2Calc interface
=================

When the input parameters are provided in GM2Calc specific form,
GM2Calc reads the input parameters from the following blocks:

 * SMINPUTS: Standard Model fermion masses, W and Z pole masses,
   alpha_s(MZ)

 * GM2CalcInput: renormalization scale, alpha_em(MZ), alpha_em in the
   Thomson limit, tan(beta), mu parameter, soft-breaking gaugino
   masses, soft-breaking Bmu parameter, soft-breaking sfermion masses,
   soft-breaking trilinear couplings


Configuration options
=====================

The calculation of a_mu can be controlled in the GM2CalcConfig block.

 * GM2CalcConfig[0]: output format (0 ... 4)

   0: minimal output (a single number)
   1: detailed (a detailed output of the various contributions)
   2: write the value of (g-2)/2 into LOWEN block, entry 6
   3: write the value of (g-2)/2 into SPhenoLowEnergy block, entry 21
   4: write the value of (g-2)/2 into GM2CalcOutput block, entry 0

 * GM2CalcConfig[1]: loop order of the calculation (0, 1 or 2)

 * GM2CalcConfig[2]: disable/enable tan(beta) resummation (0 or 1)

 * GM2CalcConfig[3]: force output even if physical problem has occured
   (0 or 1).  WARNING: The result might not be trusted if a problem
   has occured!

 * GM2CalcConfig[4]: disable/enable verbose output (0 or 1).

 * GM2CalcConfig[5]: disable/enable uncertainty estimation (0 or 1).

   Depending on the chosen output format, GM2CalcConfig[0], the
   uncertainty is written

   as a sigle number to stdout    in case of minimal output,
   to the first line              in case of detailed output,
   to GM2CalcOutput[1]            otherwise.


Source code documentation
=========================

GM2Calc uses Doxygen to document the source code.  The complete source
code documentation can be generated by running

  $ make doc

Afterwards, the generated HTML pages can be found in doc/html/ and can
be openend with your favourite web browser, e.g.

  $ firefox doc/html/index.html
